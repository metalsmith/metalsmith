#!/usr/bin/env node

/**
 * Add backwards compatibility for Node 0.10.
 */

require('gnode');

/**
 * Dependencies.
 */

var chalk = require('chalk');
var exists = require('fs').existsSync;
var Metalsmith = require('..');
var resolve = require('path').resolve;
var argv = require('minimist')(process.argv.slice(2));


var config_file = 'metalsmith.json';
/**
 * Config.
 */

 if(argv.h || argv.help) {
   docs();
   process.exit(0);
 }

 if(argv.config){
   config_file = process.argv[process.argv.indexOf('--config') + 1];
 } else if(argv.c){
   config_file = process.argv[process.argv.indexOf('-c') + 1];
 } else if(process.argv[2]) {
   config_file = process.argv[2];
 }

var config = resolve(process.cwd(), config_file);
if (!exists(config)) fatal('could not find a "' + config_file + '" configuration file.');

try {
  var json = require(config);
} catch (e) {
  fatal('it seems like "' + config_file + '" is malformed.');
}

/**
 * Metalsmith.
 */

var metalsmith = new Metalsmith(process.cwd());
if (json.source) metalsmith.source(json.source);
if (json.destination) metalsmith.destination(json.destination);
if (json.metadata) metalsmith.metadata(json.metadata);
if (json.clean != null) metalsmith.clean(json.clean);

/**
 * Plugins.
 */

normalize(json.plugins).forEach(function(plugin){
  for (var name in plugin) {
    var opts = plugin[name];
    var localPath = resolve(process.cwd(), 'node_modules', name);
    var fn;

    try {
      fn = exists(localPath) ? require(localPath) : require(name);
    } catch (e) {
      fatal('failed to require plugin "' + name + '".');
    }

    metalsmith.use(fn(opts));
  }
});

/**
 * Build.
 */

metalsmith.build(function(err){
  if (err) return fatal(err.message);
  log('successfully built to ' + metalsmith.destination());
});

/**
 * Log an error and then exit the process.
 *
 * @param {String} message
 */

function fatal(msg){
  console.error();
  console.error(chalk.red('  Metalsmith') + chalk.gray(' · ') + msg);
  console.error();
  process.exit(1);
}

/**
 * Log a `message`.
 *
 * @param {String} message
 */

function log(message){
  console.log();
  console.log(chalk.gray('  Metalsmith · ') + message);
  console.log();
}

/**
 * Normalize an `obj` of plugins.
 *
 * @param {Array or Object} obj
 * @return {Array}
 */

function normalize(obj){
  if (obj instanceof Array) return obj;
  var ret = [];

  for (var key in obj) {
    var plugin = {};
    plugin[key] = obj[key];
    ret.push(plugin);
  }

  return ret;
}

function docs() {
  console.log('=============\nmetalsmith\n=============\n');
  console.log('-h --help: show docs\n');
  console.log('custom config name:\n')
  console.log('-c');
  console.log('--config');
  console.log('\ndefault: \nmetalsmith [custom-config-file]\n\n')
}
