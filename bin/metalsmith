#!/usr/bin/env node

var chalk = require('chalk');
var exists = require('fs').existsSync;
var Metalsmith = require('..');
var resolve = require('path').resolve;

/**
 * Config.
 */

var config = resolve(process.cwd(), 'metalsmith.json');
if (!exists(config)) fatal('could not find a "metalsmith.json" configuration file.');

try {
  var json = require(config);
} catch (e) {
  fatal('it seems like "metalsmith.json" is malformed.');
}

/**
 * Metalsmith.
 */

var metalsmith = new Metalsmith(process.cwd());
['source', 'destination', 'cleanIgnore', 'metadata'].forEach(function(key){
  if (json[key]) metalsmith[key](json[key]);
});

/**
 * Plugins.
 */

var plugins = normalize(json.plugins);

plugins.forEach(function(plugin){
  for (var name in plugin) {
    var opts = plugin[name];
    var fn;

    try {
      fn = require(name);
    } catch (e) {
      fatal('failed to require plugin "' + name + '".');
    }

    metalsmith.use(fn(opts));
  }
});


/**
 * Build.
 */

metalsmith.build(function(err){
  if (err) return fatal(err.message);
  log('successfully built to ' + metalsmith.destination());
});

/**
 * Log an error and then exit the process.
 *
 * @param {String} message
 */

function fatal(msg){
  console.error();
  console.error(chalk.red('  Metalsmith') + chalk.gray(' · ') + msg);
  console.error();
  process.exit(1);
}

/**
 * Log a `message`.
 *
 * @param {String} message
 */

function log(message){
  console.log();
  console.log(chalk.gray('  Metalsmith · ') + message);
  console.log();
}

/**
 * Normalize an `obj` of plugins.
 *
 * @param {Array or Object} obj
 * @return {Array}
 */

function normalize(obj){
  if (obj instanceof Array) return obj;
  var ret = [];

  for (var key in obj) {
    var plugin = {};
    plugin[key] = obj[key];
    ret.push(plugin);
  }

  return ret;
}