#!/usr/bin/env node

var chalk = require('chalk');
var commander = require('commander');
var exists = require('fs').existsSync;
var Metalsmith = require('..');
var resolve = require('path').resolve;
var packageJSON = require('../package.json');

/**
 * Command line.
 */
var program = commander;
program
  .version(packageJSON.version)
  .option('-w, --watch [pattern]', 'Watch for file modifications and re-trigger a build')
  .parse(process.argv)
;

/**
 * Config.
 */

var config = resolve(process.cwd(), 'metalsmith.json');
if (!exists(config)) fatal('could not find a "metalsmith.json" configuration file.');

try {
  var json = require(config);
} catch (e) {
  fatal('it seems like "metalsmith.json" is malformed.');
}

/**
 * Settings.
 */

var src = json.source;
var dest = json.destination;
var data = json.metadata;
var clean = !! json.clean;

/**
 * Metalsmith.
 */

var metalsmith = new Metalsmith(process.cwd());
if (src) metalsmith.source(src);
if (dest) metalsmith.destination(dest);
if (data) metalsmith.metadata(data);
metalsmith.clean(clean);

/**
 * Plugins.
 */

var plugins = normalize(json.plugins);

plugins.forEach(function(plugin){
  for (var name in plugin) {
    var opts = plugin[name];
    var fn;
    var localPath = resolve(process.cwd(), 'node_modules', name); 

    try {
      if (exists(localPath)) {
        fn = require(localPath);
      } else {
        fn = require(name);
      }
    } catch (e) {
      fatal('failed to require plugin "' + name + '".');
    }

    metalsmith.use(fn(opts));
  }
});


/**
 * Build or Watch
 */

metalsmith.build(function(err){
  if (err) return fatal(err.message);
  log('successfully built to ' + metalsmith.destination());
});

if (program.watch) {
  if (program.watch !== 'string') program.watch = json.source + '/**/*';
  metalsmith.watch({ patterns: program.watch }, function onBuild(err) {
    if (err) return console.log(err.message);
    log('successfully built to ' + metalsmith.destination());
  });
}

/**
 * Log an error and then exit the process.
 *
 * @param {String} message
 */

function fatal(msg){
  console.error();
  console.error(chalk.red('  Metalsmith') + chalk.gray(' · ') + msg);
  console.error();
  process.exit(1);
}

/**
 * Log a `message`.
 *
 * @param {String} message
 */

function log(message){
  console.log();
  console.log(chalk.gray('  Metalsmith · ') + message);
  console.log();
}

/**
 * Normalize an `obj` of plugins.
 *
 * @param {Array or Object} obj
 * @return {Array}
 */

function normalize(obj){
  if (obj instanceof Array) return obj;
  var ret = [];

  for (var key in obj) {
    var plugin = {};
    plugin[key] = obj[key];
    ret.push(plugin);
  }

  return ret;
}
